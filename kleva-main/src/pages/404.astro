---
import BaseLayout from "@/layouts/base-layout.astro";
import ButtonPrimary from "@/components/buttons/button-primary.astro";
import { APP_PAGES } from "@/consts";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<BaseLayout
  title="404 - Page Not Found | Kleva"
  description={t("404.subtitle")}
>
  <section id="not-found" class="section__block__bottom">
    <div class="background__video">
      <div class="gradient"></div>
      <video autoplay muted loop playsinline preload="none" class="hero-video">
        <source
          src="https://vs0b2e5bca.ufs.sh/f/nBmF7aip13QmHibvkWrMps9OQ80ePHWDTVtGFaXNY2LgrJKv"
          type="video/mp4"
        />
        {t("hero.video")}
      </video>
    </div>
    <div class="container content">
      <div class="error-code">404</div>
      <h1>{t("404.title")}</h1>
      <p class="hero__subtitle">
        {t("404.subtitle")}
      </p>
      <p class="hero__copy">
        {t("404.copy")}
      </p>

      <div class="hero__buttons">
        <ButtonPrimary
          asLink
          href={APP_PAGES.home.path}
          label={t("404.button.home")}
        />
      </div>
    </div>
  </section>
</BaseLayout>

<style lang="scss">
  @use "../styles/mixins/" as *;

  #not-found {
    position: relative;
    overflow: hidden;
    min-height: 100vh;
    display: flex;
    align-items: center;
  }

  .background__video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    opacity: 0;
    transition: opacity 3s ease-out;

    &.loaded {
      opacity: 0.25;
    }

    .gradient {
      position: absolute;
      z-index: 2;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 100%;
      margin-inline: auto;
      max-width: 1920px;
      height: 100%;
      background: #000000;
      background: linear-gradient(
        90deg,
        rgba(0, 0, 0, 1) 0%,
        rgba(0, 0, 0, 0) 8%,
        rgba(0, 0, 0, 0) 92%,
        rgba(0, 0, 0, 1) 100%
      );
    }
  }

  .hero-video {
    position: relative;
    z-index: 1;
    width: 100%;
    max-width: 1920px;
    margin-inline: auto;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .container {
    padding-top: 140px;
    padding-bottom: 140px;

    @include respond-to(md) {
      padding-top: 180px;
      padding-bottom: 180px;
    }

    @include respond-to(lg) {
      padding-top: 240px;
      padding-bottom: 240px;
    }
  }

  .content {
    text-align: center;
  }

  .error-code {
    font-family: var(--font-mono);
    font-size: 120px;
    font-weight: 300;
    font-style: italic;
    line-height: 1;
    margin-bottom: 24px;
    color: rgba(var(--clr-pink), 1);

    @include respond-to(sm) {
      font-size: 160px;
    }

    @include respond-to(md) {
      font-size: 200px;
    }
  }

  h1 {
    font-family: var(--font-sans);
    font-size: 40px;
    font-weight: 300;
    letter-spacing: -1px;
    line-height: 1.2;
    margin-bottom: 16px;
    max-width: 600px;
    margin-inline: auto;

    @include respond-to(sm) {
      font-size: 48px;
    }

    @include respond-to(md) {
      font-size: 64px;
      max-width: 800px;
    }

    @include respond-to(lg) {
      font-size: 70px;
    }
  }

  .hero__subtitle {
    font-size: 20px;
    line-height: 1.3;
    letter-spacing: -0.2px;
    margin-bottom: 24px;
    max-width: 600px;
    margin-inline: auto;
    opacity: 0.8;

    @include respond-to(md) {
      font-size: 24px;
    }
  }

  .hero__copy {
    margin-bottom: 48px;
    font-size: 18px;
    line-height: 1.4;
    letter-spacing: -0.18px;
    max-width: 592px;
    margin-inline: auto;
    opacity: 0.9;
  }

  .hero__buttons {
    display: flex;
    flex-direction: column;
    gap: 24px;
    max-width: 300px;
    margin-inline: auto;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const video = document.querySelector(".hero-video") as HTMLVideoElement;
    const videoContainer = document.querySelector(
      ".background__video"
    ) as HTMLElement;

    if (video && videoContainer) {
      const handleCanPlay = () => {
        videoContainer.classList.add("loaded");
        video.removeEventListener("canplay", handleCanPlay);
      };

      video.addEventListener("canplay", handleCanPlay);

      if (video.readyState === 0) {
        video.load();
      }
    }
  });
</script>
