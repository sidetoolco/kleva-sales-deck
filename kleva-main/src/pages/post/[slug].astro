---
// ./src/pages/post/[slug].astro
import type { KlevaPostQueryResult } from "../../sanity/types";
import { klevaPostQuery } from "../../sanity/lib/queries";
import type { SanityDocument } from "@sanity/client";
import { loadQuery } from "../../sanity/lib/load-query";
import PortableText from "@/components/portable-text.astro";
import BaseLayout from "@/layouts/base-layout.astro";

export async function getStaticPaths() {
  const { data: posts } = await loadQuery<SanityDocument[]>({
    query: `*[_type == "klevaPost"]`,
  });

  return posts.map(({ slug }) => {
    return {
      params: {
        slug: slug.current,
      },
    };
  });
}

const { params } = Astro;

const { data: post } = await loadQuery<KlevaPostQueryResult>({
  query: klevaPostQuery,
  params,
});

function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric",
  });
}
---

<BaseLayout title={post?.title || ""} description={post?.brief || ""}>
  <script
    is:inline
    type="application/ld+json"
    set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Article",
      headline: post?.title,
      description: post?.brief,
      datePublished: post?.publishedAt,
      dateModified: post?.publishedAt,
      author: {
        "@type": "Person",
        name: post?.author?.slug?.current,
        jobTitle: post?.author?.role,
      },
      publisher: {
        "@type": "Organization",
        name: "Kleva",
        logo: {
          "@type": "ImageObject",
          url: "https://www.kleva.co/favicon.svg",
        },
      },
      mainEntityOfPage: {
        "@type": "WebPage",
        "@id": Astro.url,
      },
    })}
  />
  <script
    is:inline
    type="application/ld+json"
    set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      itemListElement: [
        {
          "@type": "ListItem",
          position: 1,
          name: "Home",
          item: "https://www.kleva.co",
        },
        {
          "@type": "ListItem",
          position: 2,
          name: "Blog",
          item: "https://www.kleva.co/blog/1",
        },
        {
          "@type": "ListItem",
          position: 3,
          name: post?.title,
        },
      ],
    })}
  />
  <div class="section__block__bottom">
    <div class="banner">
      <div class="g-noise"></div>
      <div class="gradient"></div>
    </div>

    <div class="container">
      <div class="breadcrumb">
        / <a href="/blog/1" id="blog-back-link">Blog</a> /
        <span class="pink">article</span>
      </div>
      <div class="post__header">
        <span class="tag">{post?.category?.title}</span>
        <h1>{post?.title}</h1>
        <p class="brief">{post?.brief}</p>
        <div class="info">
          <p class="date">
            {post?.publishedAt ? formatDate(post.publishedAt) : ""}
            <span class="bar">-</span>{" "}
            <span class="strong">{post?.readingTime} min read</span>
          </p>
          <span class="separator">|</span>
          <p class="author__info">
            <span class="author">
              by {post?.author?.slug?.current}
            </span>
            <span class="role">{post?.author?.role}</span>
          </p>
        </div>
      </div>

      <div class="post__body">
        <PortableText portableText={post?.body} />
      </div>
    </div>
  </div>
</BaseLayout>

<style lang="scss">
  @use "../../styles/mixins/" as *;
  .section__block__bottom {
    position: relative;
    padding-top: 100px;

    @include respond-to(md) {
      padding-top: 124px;
    }
  }
  .banner {
    position: absolute;
    height: min(50vh, 470px);
    width: 100%;
    top: 0;
    left: 0;
    z-index: 1;

    .gradient {
      width: 100%;
      height: 100%;
      position: relative;
      z-index: 2;
      background: #000000;
      background: linear-gradient(
        0deg,
        rgba(0, 0, 0, 1) 0%,
        rgba(0, 0, 0, 0) 34%
      );
    }
  }
  .breadcrumb {
    position: relative;
    z-index: 3;
    font-size: 12px;
    font-family: var(--font-mono);
    font-weight: 500;
    letter-spacing: 1px;
    text-transform: uppercase;
    margin-bottom: 80px;

    @include respond-to(md) {
      font-size: 16px;
      letter-spacing: 1.6px;
      margin-bottom: 104px;
    }
    a {
      color: rgba(var(--clr-white), 1);
      text-decoration: none;
      transition: color 0.25s var(--bezier-expo);

      &:hover {
        color: rgba(var(--clr-pink), 1);
      }
    }

    .pink {
      color: rgba(var(--clr-pink), 1);
    }
  }
  .post__header {
    position: relative;
    z-index: 3;
    max-width: 706px;
    margin-inline: auto;

    .tag {
      display: block;
      margin-bottom: 18px;
      color: rgba(var(--clr-pink), 1);
      text-align: center;
      font-family: var(--font-mono);
      font-size: 14px;
      font-weight: 500;
      line-height: 1.71;
      letter-spacing: 1.4px;
      text-transform: uppercase;
    }

    h1 {
      color: rgba(var(--clr-white), 1);
      text-align: center;
      font-family: var(--font-sans);
      font-size: 36px;
      font-weight: 300;
      line-height: 1;
      letter-spacing: -1.08px;

      @include respond-to(md) {
        font-size: 48px;
      }

      @include respond-to(lg) {
        font-size: 54px;
      }
    }

    .brief {
      color: rgba(var(--clr-white), 1);
      text-align: center;
      font-family: var(--font-sans);
      font-size: 18px;
      line-height: 1.12;
      letter-spacing: -0.18px;
      margin-block: 48px;
    }

    .info {
      display: flex;
      justify-content: center;
      gap: 16px;
      align-items: center;

      @include respond-to(sm) {
        gap: 16px;
      }

      p.date {
        font-size: 14px;
        font-weight: 300;
        .bar {
          display: none;
          @include respond-to(sm) {
            display: inline;
          }
        }
        .strong {
          display: block;
          font-weight: 600;
          @include respond-to(sm) {
            display: inline;
          }
        }
      }
      .author__info {
        display: flex;
        flex-direction: column;

        @include respond-to(sm) {
          display: block;
        }
      }
      .author {
        font-size: 12px;
        font-family: var(--font-mono);
        text-transform: uppercase;
      }
      .separator {
        opacity: 0.5;
      }
      .role {
        font-size: 14px;
        font-weight: 300;
        line-height: 1.16;
        letter-spacing: -0.12px;
        text-transform: none;
        opacity: 0.5;
      }
    }
  }
  .post__body {
    max-width: 906px;
    margin-inline: auto;
    margin-top: 96px;

    @include respond-to(md) {
      margin-top: 120px;
    }

    @include respond-to(lg) {
      margin-top: 144px;
    }
  }
</style>

<script>
  /**
   * Intelligent blog navigation handler
   *
   * This script handles the "Back to Blog" link in blog posts.
   * If the user came from a specific blog page (like /blog/2),
   * they'll return to that page. Otherwise, they go to /blog/1.
   */

  function setupBlogNavigation() {
    const blogLink = document.querySelector(
      "#blog-back-link"
    ) as HTMLAnchorElement;

    if (!blogLink) return;

    const referrer = document.referrer;
    const blogPagePattern = /\/blog\/(\d+)/;
    const match = referrer.match(blogPagePattern);

    if (match) {
      const pageNumber = match[1];
      blogLink.href = `/blog/${pageNumber}`;
    } else {
      blogLink.href = "/blog/1";
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", setupBlogNavigation);
  } else {
    setupBlogNavigation();
  }
</script>
